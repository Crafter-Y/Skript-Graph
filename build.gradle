import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

import java.time.LocalTime

plugins {
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'java'
}

allprojects {
	repositories {
		mavenCentral()
		maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://repo.papermc.io/repository/maven-public/' }
		maven { url 'https://ci.emc.gs/nexus/content/groups/aikar/' }
	}
}

dependencies {
	shadow group: 'io.papermc', name: 'paperlib', version: '1.0.8'
	shadow group: 'org.bstats', name: 'bstats-bukkit', version: '3.0.2'
	implementation group: 'io.papermc.paper', name: 'paper-api', version: '1.19.4-R0.1-SNAPSHOT'
	implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.700'
	implementation group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'
	implementation group: 'com.sk89q.worldguard', name: 'worldguard-legacy', version: '7.0.0-SNAPSHOT'
	implementation group: 'net.milkbowl.vault', name: 'Vault', version: '1.7.1', {
		exclude group: 'org.bstats', module: 'bstats-bukkit'
	}

	implementation fileTree(dir: 'lib', include: '*.jar')
}

task checkAliases {
	description 'Checks for the existence of the aliases.'
	doLast {
		def aliasFolder = project.file('skript-aliases')
		if (!aliasFolder.exists() || aliasFolder.listFiles().length == 0) {
			throw new InvalidUserDataException('Aliases are missing from \'skript-aliases\' folder. Consider fetching submodules with \'git submodule update --init\'.')
		}
	}
}

task jar(overwrite: true, type: ShadowJar) {
	dependsOn checkAliases

    manifest {
		attributes 'Main-Class': 'de.craftery.skriptgraph.Main'
    }
	archiveFileName = jarName ? 'Skript.jar' : jarName
	from sourceSets.main.output
}

task build(overwrite: true, type: ShadowJar) {
	archiveFileName = jarName ? 'Skript.jar' : jarName
	from sourceSets.main.output
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = 'sources'
}

tasks.withType(ShadowJar) {
	configurations = [
		project.configurations.shadow
	]

    manifest {
		attributes 'Main-Class': 'de.craftery.skriptgraph.Main'
    }
	dependencies {
		include(dependency('io.papermc:paperlib'))
		include(dependency('org.bstats:bstats-bukkit'))
		include(dependency('org.bstats:bstats-base'))
	}
	relocate 'io.papermc.lib', 'ch.njol.skript.paperlib'
	relocate 'org.bstats', 'ch.njol.skript.bstats'
	from 'skript-aliases', {
		into 'aliases-english' // Change this if we get aliases in other languages
	}
}

processResources {
	filter ReplaceTokens, tokens: [
		'version'         : project.property('version'),
		'today'           : 'unknown', // Don't leak information about system this was built on
		'release-flavor'  : 'selfbuilt-unknown', // Note: 'selfbuilt' prefix makes updater report a custom build
		'release-channel' : 'none', // No updates, so anything else wouldn't make sense
		'release-updater' : 'ch.njol.skript.update.NoUpdateChecker', // Disable update checking
		'release-source'  : '',
		'release-download': 'null'
	]
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compileClasspath
	options.encoding = 'UTF-8'
	// currently our javadoc has a lot of errors, so we need to suppress the linter
	options.addStringOption('Xdoclint:none', '-quiet')
}

def latestEnv = 'java17/paper-1.19.4.json'
def latestJava = 17
def oldestJava = 8

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(latestJava))
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ['-source', '' + oldestJava, '-target', '' + oldestJava]
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'